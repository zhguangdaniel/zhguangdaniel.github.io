<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Daniel.Zhang]]></title>
  <subtitle><![CDATA[Do for my dream !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhguangdaniel.github.io/"/>
  <updated>2015-04-18T04:18:00.897Z</updated>
  <id>http://zhguangdaniel.github.io/</id>
  
  <author>
    <name><![CDATA[ZhangGuang(Daniel)]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java系列笔记(1) - Java 类加载与初始化]]></title>
    <link href="http://zhguangdaniel.github.io/2015/04/18/java-1-classloader/"/>
    <id>http://zhguangdaniel.github.io/2015/04/18/java-1-classloader/</id>
    <published>2015-04-18T04:18:00.897Z</published>
    <updated>2015-04-18T04:18:00.897Z</updated>
    <content type="html"><![CDATA[<h1 id="类加载器">类加载器</h1><p>在了解Java的机制之前，需要先了解类在JVM（Java虚拟机）中是如何加载的，这对后面理解java其它机制将有重要作用。</p>
<p>每个类编译后产生一个Class对象，存储在.class文件中，JVM使用类加载器（Class Loader）来加载类的字节码文件（.class），类加载器实质上是一条类加载器链，一般的，我们只会用到一个原生的类加载器，它只加载Java API等可信类，通常只是在本地磁盘中加载，这些类一般就够我们使用了。如果我们需要从远程网络或数据库中下载.class字节码文件，那就需要我们来挂 载额外的类加载器。</p>
<p>一般来说，类加载器是按照树形的层次结构组织的，每个加载器都有一个父类加载器。另外，每个类加载器都支持代理模式，即可以自己完成Java类的加载工作，也可以代理给其它类加载器。</p>
<p>类加载器的加载顺序有两种，一种是父类优先策略，一种是是自己优先策略，父类优先策略是比较一般的情况（如JDK采用的就是这种方式），在这种策略 下，类在加载某个Java类之前，会尝试代理给其父类加载器，只有当父类加载器找不到时，才尝试自己去加载。自己优先的策略与父类优先相反，它会首先尝试 子经济加载，找不到的时候才要父类加载器去加载，这种在web容器（如tomcat）中比较常见。<br><a id="more"></a></p>
<h1 id="动态加载">动态加载</h1><p>不管使用什么样的类加载器，类，都是在第一次被用到时，动态加载到JVM的。这句话有两层含义：</p>
<p><em>1. Java程序在运行时并不一定被完整加载，只有当发现该类还没有加载时，才去本地或远程查找类的.class文件并验证和加载；</em><br><em>2. 当程序创建了第一个对类的静态成员的引用（如类的静态变量、静态方法、构造方法——构造方法也是静态的）时，才会加载该类。Java的这个特性叫做：动态加载。</em></p>
<p>需要区分加载和初始化的区别，加载了一个类的.class文件，不意味着该Class对象被初始化，事实上，一个类的初始化包括3个步骤：</p>
<ul>
<li>加载（Loading），由类加载器执行，查找字节码，并创建一个Class对象（只是创建）；</li>
<li>链接（Linking），验证字节码，为静态域分配存储空间（只是分配，并不初始化该存储空间），解析该类创建所需要的对其它类的应用；</li>
<li>初始化（Initialization），首先执行静态初始化块static{}，初始化静态变量，执行静态方法（如构造方法）。</li>
</ul>
<h1 id="链接">链接</h1><p>Java在加载了类之后，需要进行链接的步骤，链接简单地说，就是将已经加载的java二进制代码组合到JVM运行状态中去。它包括3个步骤：</p>
<ol>
<li>验证（Verification），验证是保证二进制字节码在结构上的正确性，具体来说，工作包括检测类型正确性，接入属性正确性（public、private），检查final class 没有被继承，检查静态变量的正确性等。</li>
<li>准备（Preparation），准备阶段主要是创建静态域，分配空间，给这些域设默认值，需要注意的是两点：一个是在准备阶段不会执行任何代码，仅仅是设置 默认值，二个是这些默认值是这样分配的，原生类型全部设为0，如：float:0f,int 0, long 0L, boolean:0（布尔类型也是0），其它引用类型为null。</li>
<li>解析（Resolution），解析的过程就是对类中的接口、类、方法、变量的符号引用进行解析并定位，解析成直接引用（符号引用就是编码是用字符串表示某个 变量、接口的位置，直接引用就是根据符号引用翻译出来的地址），并保证这些类被正确的找到。解析的过程可能导致其它的类被加载。需要注意的是，根据不同的 解析策略，这一步不一定是必须的，有些解析策略在解析时递归的把所有引用解析，这是early resolution，要求所有引用都必须存在；还有一种策略是late resolution，这也是Oracle 的JDK所采取的策略，即在类只是被引用了，还没有被真正用到时，并不进行解析，只有当真正用到了，才去加载和解析这个类。</li>
</ol>
<h1 id="初始化">初始化</h1><p>注 意：在《Java编程思想》中，说static{}子句是在类第一次加载时执行且执行一次（可能是笔误或翻译错误，因为此书的例子显示static是在第 一次初始化时执行的），《Java深度历险》中说 static{}是在第一次实例化时执行且执行一次，这两种应该都是错误的，static{}是在第一次初始化时执行，且只执行一次；用下面的代码可以判 定出来：</p>
<pre><code><span class="keyword">package</span> myblog.classloader;

<span class="comment">/**
* @project MyBlog
* @create 2013年6月18日 下午7:00:45
* @version 1.0.0
* @author 张广
*/</span>
<span class="keyword">public</span> class Toy {
    <span class="keyword">private</span> <span class="keyword">String</span> name;

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> price = <span class="number">10</span>;

    <span class="keyword">static</span> {
        System.out.<span class="built_in">println</span>(<span class="string">"Initializing"</span>);
    }

    Toy() {
        System.out.<span class="built_in">println</span>(<span class="string">"Building"</span>);
    }

    Toy(<span class="keyword">String</span> name) {
        <span class="keyword">this</span>.setName(name);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> playToy(<span class="keyword">String</span> player) {
        <span class="keyword">String</span> msg = buildMsg(player);
        System.out.<span class="built_in">println</span>(msg);
        <span class="keyword">return</span> msg;
    }

    <span class="keyword">private</span> <span class="keyword">String</span> buildMsg(<span class="keyword">String</span> player) {
        <span class="keyword">String</span> msg = player + <span class="string">" plays "</span> + name;
        <span class="keyword">return</span> msg;
    }
}
<span class="comment">// 对上面的类，执行下面的代码：</span>
Class c = Class.forName(<span class="string">"myblog.rtti.Toy"</span>);
<span class="comment">// c.newInstance();</span>
</code></pre><p>可以看到，不实例化，只执行forName初始化时，仍然会执行static{}子句，但不执行构造方法，因此输出的只有Initializing，没有Building。<br>关于初始化，@阿春阿晓 在本文的评论中给出了很详细的场景，感谢@阿春阿晓：<br>根据java虚拟机规范，所有java虚拟机实现必须在每个类或接口被java程序首次主动使用时才初始化。<br>主动使用有以下6种：</p>
<ol>
<li>创建类的实例</li>
<li>访问某个类或者接口的静态变量，或者对该静态变量赋值（如果访问静态编译时常量(即编译时可以确定值的常量)不会导致类的初始化）</li>
<li>调用类的静态方法</li>
<li>反射（Class.forName(xxx.xxx.xxx)）</li>
<li>初始化一个类的子类（相当于对父类的主动使用），不过直接通过子类引用父类元素，不会引起子类的初始化（参见示例6）</li>
<li>Java虚拟机被标明为启动类的类（包含main方法的）</li>
</ol>
<p>类与接口的初始化不同，如果一个类被初始化，则其父类或父接口也会被初始化，但如果一个接口初始化，则不会引起其父接口的初始化。</p>
<h1 id="示例">示例</h1><p>1，通过上面的讲解，将可以理解下面的程序（下面的程序部分来自于《Java编程思想》）：</p>
<pre><code><span class="keyword">class</span> <span class="title">Toy</span> {
    <span class="keyword">static</span> {
        System.<span class="keyword">out</span>.println(<span class="string">"Initializing"</span>);<span class="comment">// 静态子句，只在类第一次被加载并初始化时执行一次，而且只执行一次    </span>
    }

    Toy() {
        System.<span class="keyword">out</span>.println(<span class="string">"Building"</span>);<span class="comment">// 构造方法，在每次声明新对象时加载   </span>
    }
}
</code></pre><p>对上面的程序段，第一次调用Class.forName(“Toy”)，将执行static子句；如果在之后执行new Toy()都只执行构造方法。</p>
<p>2，需要注意newInstance()方法</p>
<pre><code><span class="keyword">Class</span> <span class="keyword">cc</span> = <span class="keyword">Class</span>.forName(<span class="string">"Toy"</span>);<span class="comment">//获得类（注意，需要使用含包名的全限定名）</span>
Toy toy=(Toy)<span class="keyword">cc</span>.newInstance(); <span class="comment">//相当于new一个对象，但Gum类必须有默认构造方法（无参）</span>
</code></pre><p>3，用类字面常量 .class和Class.forName都可以创建对类的应用，但是不同点在于，用Gum.class创建Class对象的应用时，不会自动初始化该Class对象（static子句不会执行）</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestToy</span> </span>{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
        <span class="comment">// try {</span>
        <span class="comment">// Class c = Class.forName("myblog.classloader.Toy");</span>
        <span class="comment">// } catch (ClassNotFoundException e) {</span>
        <span class="comment">// e.printStackTrace();</span>
        <span class="comment">// }</span>
        Class c = Toy.<span class="keyword">class</span>; <span class="comment">// 不会输出任何值</span>
    }
}
</code></pre><p>使用Toy.class是在编译期执行的，因此在编译时必须已经有了Toy的.class文件，不然会编译失败，这与 Class.forName(“myblog.classloader.Toy”)不同，后者是运行时动态加载。<br>但是，如果该main方法是直接写在Toy类中，那么调用Toy.class，会引起初始化，并输出Initializing，原因并不是Toy.class引起的，而是该类中含有启动方法main，该方法会导致Toy的初始化。</p>
<p> 4，编译时常量。回到完整的类Toy，如果直接输出：System.out.println(Toy.price)，会发现static子句和构造方法都没有被执行，这是因为Toy中，常量price被static final限定，这样的常量叫做编译时常量，对于这种常量，不需要初始化就可以读取。<br>编译时常量必须满足3个条件：static的，final的，常量。<br>下面几种都不是编译时常量，对它们的应用，都会引起类的初始化：</p>
<pre><code><span class="keyword">static</span> <span class="keyword">int</span> a;
<span class="keyword">final</span>  <span class="keyword">int</span> b;
<span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> c= ClassInitialization.rand.nextInt(<span class="number">100</span>);
<span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> d;
<span class="keyword">static</span> {
    d=<span class="number">5</span>;
}
</code></pre><p>5，static块的本质。注意下面的代码：</p>
<pre><code><span class="keyword">class</span> <span class="title">StaticBlock</span> {
    <span class="keyword">static</span> final <span class="keyword">int</span> c = <span class="number">3</span>;

    <span class="keyword">static</span> final <span class="keyword">int</span> d;

    <span class="keyword">static</span> <span class="keyword">int</span> e = <span class="number">5</span>;
    <span class="keyword">static</span> {
        d = <span class="number">5</span>;
        e = <span class="number">10</span>;
        System.<span class="keyword">out</span>.println(<span class="string">"Initializing"</span>);
    }

    StaticBlock() {
        System.<span class="keyword">out</span>.println(<span class="string">"Building"</span>);
    }
}

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StaticBlockTest</span> {
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        System.<span class="keyword">out</span>.println(StaticBlock.c);
        System.<span class="keyword">out</span>.println(StaticBlock.d);
        System.<span class="keyword">out</span>.println(StaticBlock.e);
    }
}
</code></pre><p>这段代码的输出是什么呢？Initialing在c、d、e之前输出，还是在之后？e输出的是5还是10？<br>执行一下，结果为：</p>
<pre><code>3
Initializing
5
10
</code></pre><p>答案是3最先输出，Intializing随后输出，e输出的是10，为什么呢？<br>原因是这样的：输出c时，由于c是编译时常量，不会引起类初始化，因此直接输出，输出d时，d不是编译时常量，所以会引起初始化操作，即static块的执行，于是d被赋值为5，e被赋值为10，然后输出Initializing，之后输出d为5，e为10。<br>但e为什么是10呢？原来，JDK会自动为e的初始化创建一个static块（参考：<a href="http://www.java3z.com/cwbwebhome/article/article8/81101.html?id=2497），所以上面的代码等价于：" target="_blank" rel="external">http://www.java3z.com/cwbwebhome/article/article8/81101.html?id=2497），所以上面的代码等价于：</a></p>
<pre><code><span class="keyword">class</span> <span class="title">StaticBlock</span> {
    <span class="keyword">static</span> final <span class="keyword">int</span> d;

    <span class="keyword">static</span> <span class="keyword">int</span> e;

    <span class="keyword">static</span> {
        e = <span class="number">5</span>;
    }

    <span class="keyword">static</span> {
        d = <span class="number">5</span>;
        e = <span class="number">10</span>;
        System.<span class="keyword">out</span>.println(<span class="string">"Initializing"</span>);
    }

    StaticBlock() {
        System.<span class="keyword">out</span>.println(<span class="string">"Building"</span>);
    }
}  
</code></pre><p>可见，按顺序执行，e先被初始化为5，再被初始化为10，于是输出了10。<br>类似的，容易想到下面的代码：</p>
<pre><code><span class="keyword">class</span> <span class="title">StaticBlock</span> {
    <span class="keyword">static</span> {
        d = <span class="number">5</span>;
        e = <span class="number">10</span>;
        System.<span class="keyword">out</span>.println(<span class="string">"Initializing"</span>);
    }

    <span class="keyword">static</span> final <span class="keyword">int</span> d;

    <span class="keyword">static</span> <span class="keyword">int</span> e = <span class="number">5</span>;

    StaticBlock() {
        System.<span class="keyword">out</span>.println(<span class="string">"Building"</span>);
    }
}
</code></pre><p>在这段代码中，对e的声明被放到static块后面，于是，e会先被初始化为10，再被初始化为5，所以这段代码中e会输出为5。</p>
<p>6，当访问一个Java类或接口的静态域时，只有真正声明这个域的类或接口才会被初始化（《Java深度历险》）</p>
<pre><code><span class="comment">/**
* 例子来源于《Java深度历险》第二章
* @author 张广
*
*/</span>
<span class="keyword">class</span> <span class="title">B</span> {
    <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">100</span>;
    <span class="keyword">static</span> {
        System.<span class="keyword">out</span>.println(<span class="string">"Class B is initialized"</span>);<span class="comment">// 输出       </span>
    }
}

<span class="keyword">class</span> <span class="title">A</span> <span class="title">extends</span> <span class="title">B</span> {
    <span class="keyword">static</span> {
        System.<span class="keyword">out</span>.println(<span class="string">"Class A is initialized"</span>); <span class="comment">// 不输出      </span>
    }
}

<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SuperClassTest</span> {
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        System.<span class="keyword">out</span>.println(A.<span class="keyword">value</span>);<span class="comment">// 输出100        </span>
    }
}
</code></pre><p>在该例子中，虽然通过A来引用了value，但value是在父类B中声明的，所以只会初始化B，而不会引起A的初始化。</p>
<p>说明</p>
<p>笔者在开发过程中发现自己基础太薄弱，读书时除了系统学习了一下Java的基础语法和用法、一点简单的数据结构和设计模式之外，再无深入系统的学习，而工作中的学习也是东晃一枪西晃一枪，不够扎实和系统。想到一个学习方法：学到的东西能够系统的表达出来，才说明你学到手了；于是，笔者决定边学边写，将学到的东西以博客的形式表达出来。</p>
<p>本文档会因学习的深入或错误的订正而持续更新。</p>
<p>《Java系列笔记》是本人对Java的应用和学习过程中的笔记，按知识点分章节，写这一系列笔记的目的是学习，由于笔者是边学编写的，水平有限，文中必定有疏漏之处，欢迎斧正。</p>
<p>文中多有参考前辈的书籍和博客之处，原则上不会原文引用，而是加入自己的理解改造之，如果有引用，必会注明出处，如有疑问，请联系：daniel.zhguang@gmail.com</p>
<p>更新记录</p>
<ul>
<li><p>2013年6月25日：发表；</p>
</li>
<li><p>2013年6月26日：加入@阿春阿晓的评论：引起初始化的6种场景；</p>
</li>
<li><p>2013年6月28日：加入链接和初始化的内容，加入示例6</p>
</li>
</ul>
<p>本节参考资料</p>
<ul>
<li><p>JAVA编程思想，第14章</p>
</li>
<li><p>Java深度历险</p>
</li>
<li><p>Java中static块的本质：<a href="http://www.java3z.com/cwbwebhome/article/article8/81101.html?id=2497" target="_blank" rel="external">http://www.java3z.com/cwbwebhome/article/article8/81101.html?id=2497</a></p>
</li>
<li><p>java类的装载(Loading)、链接(Linking)和初始化(Initialization)：<a href="http://blog.csdn.net/biaobiaoqi/article/details/6909141" target="_blank" rel="external">http://blog.csdn.net/biaobiaoqi/article/details/6909141</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="类加载器">类加载器</h1><p>在了解Java的机制之前，需要先了解类在JVM（Java虚拟机）中是如何加载的，这对后面理解java其它机制将有重要作用。</p>
<p>每个类编译后产生一个Class对象，存储在.class文件中，JVM使用类加载器（Class Loader）来加载类的字节码文件（.class），类加载器实质上是一条类加载器链，一般的，我们只会用到一个原生的类加载器，它只加载Java API等可信类，通常只是在本地磁盘中加载，这些类一般就够我们使用了。如果我们需要从远程网络或数据库中下载.class字节码文件，那就需要我们来挂 载额外的类加载器。</p>
<p>一般来说，类加载器是按照树形的层次结构组织的，每个加载器都有一个父类加载器。另外，每个类加载器都支持代理模式，即可以自己完成Java类的加载工作，也可以代理给其它类加载器。</p>
<p>类加载器的加载顺序有两种，一种是父类优先策略，一种是是自己优先策略，父类优先策略是比较一般的情况（如JDK采用的就是这种方式），在这种策略 下，类在加载某个Java类之前，会尝试代理给其父类加载器，只有当父类加载器找不到时，才尝试自己去加载。自己优先的策略与父类优先相反，它会首先尝试 子经济加载，找不到的时候才要父类加载器去加载，这种在web容器（如tomcat）中比较常见。<br>]]>
    
    </summary>
    
      <category term="ClassLoader" scheme="http://zhguangdaniel.github.io/tags/ClassLoader/"/>
    
      <category term="Java" scheme="http://zhguangdaniel.github.io/tags/Java/"/>
    
      <category term="Java系列笔记" scheme="http://zhguangdaniel.github.io/categories/Java%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java系列笔记(0) - 目录和概述]]></title>
    <link href="http://zhguangdaniel.github.io/2015/04/15/java-0-intro/"/>
    <id>http://zhguangdaniel.github.io/2015/04/15/java-0-intro/</id>
    <published>2015-04-15T04:00:00.000Z</published>
    <updated>2015-04-15T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>本文于2015年2月27日发表于<a href="http://www.cnblogs.com/zhguang/p/4303816.html" target="_blank" rel="external">博客园</a>，后迁入github，后面以本页为准。</p>
<h1 id="前言">前言</h1><p>笔者在开发过程中发现自己基础太薄弱，读书时除了系统学习了一下Java的基础语法和用法、一点简单的数据结构和设计模式之外，再无深入系统的学习，而工作中的学习也是东晃一枪西晃一枪，不够扎实和系统。想到一个学习方法：学到的东西能够系统的表达出来，才说明你学到手了；于是，笔者决定边学边写，将学到的东西以博客的形式表达出来。技术在于积累，在于总结，在于表达，在于分享，这4点都做到了，一个技术才是我们自己的。</p>
<p>本文档会因学习的深入或错误的订正而持续更新，不过由于本人工作较忙（屌丝程序员，加班多，没有钱，你懂得），所以更新会比较慢，不过一定会坚持写完。</p>
<p>《Java系列笔记》是本人对Java的应用和学习过程中的笔记，按知识点分章节，写这一系列笔记的目的是学习，由于笔者是边学编写的，水平有限，文中必定有疏漏之处，欢迎斧正。</p>
<p>本Java系列笔记，目前一共计划写12篇，在这个系列中，侧重于Java技术的原理和深入理解，相对之下，代码和实例较少，不过需要实例的地方，都给出 了网上相关的实例。本系列文章的主要来源是我自己的积累、自己的理解、看的书、以及网上的资料。</p>
<p>文中多有参考前辈的书籍和博客之处，原则上不会原文引用，而是加入自己的理解改造之，如果有引用，尽量会注明出处，如有疏漏或疑问，请联系：daniel.zhguang@gmail.com</p>
<h1 id="目录">目录</h1><p>下面是本文计划中的目录：</p>
<p><a href="#">Java系列笔记(1) - Java 类加载与初始化</a></p>
<p><a href="#">Java系列笔记(2) - Java RTTI和反射机制</a></p>
<p><a href="#">Java系列笔记(3) - Java 内存区域和GC机制</a></p>
<p><a href="#">Java系列笔记(4) - JVM监控与调优</a></p>
<p><a href="#">Java系列笔记(5) - 线程</a></p>
<p>Java系列笔记(6) - 并发</p>
<p>Java系列笔记(7) - 内部类</p>
<p>Java系列笔记(8) - 注解和泛型</p>
<p>Java系列笔记(9) - 枚举</p>
<p>Java系列笔记(10) - 集合类</p>
<p>Java系列笔记(11) - NIO</p>
<p>Java系列笔记(12) - IO</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文于2015年2月27日发表于<a href="http://www.cnblogs.com/zhguang/p/4303816.html" target="_blank" rel="external">博客园</a>，后迁入github，后面以本页为准。</p>
<h1]]>
    </summary>
    
      <category term="Java" scheme="http://zhguangdaniel.github.io/tags/Java/"/>
    
      <category term="Java系列笔记" scheme="http://zhguangdaniel.github.io/categories/Java%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://zhguangdaniel.github.io/2015/04/14/hello-world/"/>
    <id>http://zhguangdaniel.github.io/2015/04/14/hello-world/</id>
    <published>2015-04-14T04:00:00.000Z</published>
    <updated>2015-04-14T04:00:00.000Z</updated>
    <content type="html"><![CDATA[<p>我的博客开张了，该博客主要用于分享Java、分布式、Server端、架构、管理、生活等方面的内容，开张大吉！<br>欢迎光临我的博客，点击<a href="http://zhguangdaniel.github.io/about/" target="_blank" rel="external">这里</a>查看自我介绍吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我的博客开张了，该博客主要用于分享Java、分布式、Server端、架构、管理、生活等方面的内容，开张大吉！<br>欢迎光临我的博客，点击<a href="http://zhguangdaniel.github.io/about/" target="_blank" rel=]]>
    </summary>
    
  </entry>
  
</feed>